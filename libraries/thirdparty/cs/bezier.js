const{abs:abs,cos:cos,sin:sin,acos:acos,atan2:atan2,sqrt:sqrt,pow:pow}=Math;function crt(t){return t<0?-pow(-t,1/3):pow(t,1/3)}const pi=Math.PI,tau=2*pi,quart=pi/2,epsilon=1e-6,nMax=Number.MAX_SAFE_INTEGER||9007199254740991,nMin=Number.MIN_SAFE_INTEGER||-9007199254740991,ZERO={x:0,y:0,z:0},utils={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(t,i){const n=i(t);let e=n.x*n.x+n.y*n.y;return void 0!==n.z&&(e+=n.z*n.z),sqrt(e)},compute:function(t,i,n){if(0===t)return i[0].t=0,i[0];const e=i.length-1;if(1===t)return i[e].t=1,i[e];const r=1-t;let s=i;if(0===e)return i[0].t=t,i[0];if(1===e){const i={x:r*s[0].x+t*s[1].x,y:r*s[0].y+t*s[1].y,t:t};return n&&(i.z=r*s[0].z+t*s[1].z),i}if(e<4){let i,o,u,l=r*r,c=t*t,a=0;2===e?(s=[s[0],s[1],s[2],ZERO],i=l,o=r*t*2,u=c):3===e&&(i=l*r,o=l*t*3,u=r*c*3,a=t*c);const h={x:i*s[0].x+o*s[1].x+u*s[2].x+a*s[3].x,y:i*s[0].y+o*s[1].y+u*s[2].y+a*s[3].y,t:t};return n&&(h.z=i*s[0].z+o*s[1].z+u*s[2].z+a*s[3].z),h}const o=JSON.parse(JSON.stringify(i));for(;o.length>1;){for(let i=0;i<o.length-1;i++)o[i]={x:o[i].x+(o[i+1].x-o[i].x)*t,y:o[i].y+(o[i+1].y-o[i].y)*t},void 0!==o[i].z&&(o[i]=o[i].z+(o[i+1].z-o[i].z)*t);o.splice(o.length-1,1)}return o[0].t=t,o[0]},computeWithRatios:function(t,i,n,e){const r=1-t,s=n,o=i;let u,l=s[0],c=s[1],a=s[2],h=s[3];return l*=r,c*=t,2===o.length?(u=l+c,{x:(l*o[0].x+c*o[1].x)/u,y:(l*o[0].y+c*o[1].y)/u,z:!!e&&(l*o[0].z+c*o[1].z)/u,t:t}):(l*=r,c*=2*r,a*=t*t,3===o.length?(u=l+c+a,{x:(l*o[0].x+c*o[1].x+a*o[2].x)/u,y:(l*o[0].y+c*o[1].y+a*o[2].y)/u,z:!!e&&(l*o[0].z+c*o[1].z+a*o[2].z)/u,t:t}):(l*=r,c*=1.5*r,a*=3*r,h*=t*t*t,4===o.length?(u=l+c+a+h,{x:(l*o[0].x+c*o[1].x+a*o[2].x+h*o[3].x)/u,y:(l*o[0].y+c*o[1].y+a*o[2].y+h*o[3].y)/u,z:!!e&&(l*o[0].z+c*o[1].z+a*o[2].z+h*o[3].z)/u,t:t}):void 0))},derive:function(t,i){const n=[];for(let e=t,r=e.length,s=r-1;r>1;r--,s--){const t=[];for(let n,r=0;r<s;r++)n={x:s*(e[r+1].x-e[r].x),y:s*(e[r+1].y-e[r].y)},i&&(n.z=s*(e[r+1].z-e[r].z)),t.push(n);n.push(t),e=t}return n},between:function(t,i,n){return i<=t&&t<=n||utils.approximately(t,i)||utils.approximately(t,n)},approximately:function(t,i,n){return abs(t-i)<=(n||epsilon)},length:function(t){const i=utils.Tvalues.length;let n=0;for(let e,r=0;r<i;r++)e=.5*utils.Tvalues[r]+.5,n+=utils.Cvalues[r]*utils.arcfn(e,t);return.5*n},map:function(t,i,n,e,r){return e+(r-e)*((t-i)/(n-i))},lerp:function(t,i,n){const e={x:i.x+t*(n.x-i.x),y:i.y+t*(n.y-i.y)};return void 0!==i.z&&void 0!==n.z&&(e.z=i.z+t*(n.z-i.z)),e},pointToString:function(t){let i=t.x+"/"+t.y;return void 0!==t.z&&(i+="/"+t.z),i},pointsToString:function(t){return"["+t.map(utils.pointToString).join(", ")+"]"},copy:function(t){return JSON.parse(JSON.stringify(t))},angle:function(t,i,n){const e=i.x-t.x,r=i.y-t.y,s=n.x-t.x,o=n.y-t.y;return atan2(e*o-r*s,e*s+r*o)},round:function(t,i){const n=""+t,e=n.indexOf(".");return parseFloat(n.substring(0,e+1+i))},dist:function(t,i){const n=t.x-i.x,e=t.y-i.y;return sqrt(n*n+e*e)},closest:function(t,i){let n,e,r=pow(2,63);return t.forEach((function(t,s){e=utils.dist(i,t),e<r&&(r=e,n=s)})),{mdist:r,mpos:n}},abcratio:function(t,i){if(2!==i&&3!==i)return!1;if(void 0===t)t=.5;else if(0===t||1===t)return t;const n=pow(t,i)+pow(1-t,i);return abs((n-1)/n)},projectionratio:function(t,i){if(2!==i&&3!==i)return!1;if(void 0===t)t=.5;else if(0===t||1===t)return t;const n=pow(1-t,i);return n/(pow(t,i)+n)},lli8:function(t,i,n,e,r,s,o,u){const l=(t-n)*(s-u)-(i-e)*(r-o);return 0!=l&&{x:((t*e-i*n)*(r-o)-(t-n)*(r*u-s*o))/l,y:((t*e-i*n)*(s-u)-(i-e)*(r*u-s*o))/l}},lli4:function(t,i,n,e){const r=t.x,s=t.y,o=i.x,u=i.y,l=n.x,c=n.y,a=e.x,h=e.y;return utils.lli8(r,s,o,u,l,c,a,h)},lli:function(t,i){return utils.lli4(t,t.c,i,i.c)},makeline:function(t,i){return new Bezier(t.x,t.y,(t.x+i.x)/2,(t.y+i.y)/2,i.x,i.y)},findbbox:function(t){let i=nMax,n=nMax,e=nMin,r=nMin;return t.forEach((function(t){const s=t.bbox();i>s.x.min&&(i=s.x.min),n>s.y.min&&(n=s.y.min),e<s.x.max&&(e=s.x.max),r<s.y.max&&(r=s.y.max)})),{x:{min:i,mid:(i+e)/2,max:e,size:e-i},y:{min:n,mid:(n+r)/2,max:r,size:r-n}}},shapeintersections:function(t,i,n,e,r){if(!utils.bboxoverlap(i,e))return[];const s=[],o=[t.startcap,t.forward,t.back,t.endcap],u=[n.startcap,n.forward,n.back,n.endcap];return o.forEach((function(i){i.virtual||u.forEach((function(e){if(e.virtual)return;const o=i.intersects(e,r);o.length>0&&(o.c1=i,o.c2=e,o.s1=t,o.s2=n,s.push(o))}))})),s},makeshape:function(t,i,n){const e=i.points.length,r=t.points.length,s=utils.makeline(i.points[e-1],t.points[0]),o=utils.makeline(t.points[r-1],i.points[0]),u={startcap:s,forward:t,back:i,endcap:o,bbox:utils.findbbox([s,t,i,o]),intersections:function(t){return utils.shapeintersections(u,u.bbox,t,t.bbox,n)}};return u},getminmax:function(t,i,n){if(!n)return{min:0,max:0};let e,r,s=nMax,o=nMin;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(let u=0,l=n.length;u<l;u++)e=n[u],r=t.get(e),r[i]<s&&(s=r[i]),r[i]>o&&(o=r[i]);return{min:s,mid:(s+o)/2,max:o,size:o-s}},align:function(t,i){const n=i.p1.x,e=i.p1.y,r=-atan2(i.p2.y-e,i.p2.x-n);return t.map((function(t){return{x:(t.x-n)*cos(r)-(t.y-e)*sin(r),y:(t.x-n)*sin(r)+(t.y-e)*cos(r)}}))},roots:function(t,i){i=i||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=t.length-1,e=utils.align(t,i),r=function(t){return 0<=t&&t<=1};if(2===n){const t=e[0].y,i=e[1].y,n=e[2].y,s=t-2*i+n;if(0!==s){const e=-sqrt(i*i-t*n),o=-t+i;return[-(e+o)/s,-(-e+o)/s].filter(r)}return i!==n&&0===s?[(2*i-n)/(2*i-2*n)].filter(r):[]}const s=e[0].y,o=e[1].y,u=e[2].y;let l=3*o-s-3*u+e[3].y,c=3*s-6*o+3*u,a=-3*s+3*o,h=s;if(utils.approximately(l,0)){if(utils.approximately(c,0))return utils.approximately(a,0)?[]:[-h/a].filter(r);const t=sqrt(a*a-4*c*h),i=2*c;return[(t-a)/i,(-a-t)/i].filter(r)}c/=l,a/=l,h/=l;const x=(3*a-c*c)/3,y=x/3,f=(2*c*c*c-9*c*a+27*h)/27,p=f/2,m=p*p+y*y*y;let z,d,g,v,b;if(m<0){const t=-x/3,i=sqrt(t*t*t),n=-f/(2*i),e=acos(n<-1?-1:n>1?1:n),s=2*crt(i);return g=s*cos(e/3)-c/3,v=s*cos((e+tau)/3)-c/3,b=s*cos((e+2*tau)/3)-c/3,[g,v,b].filter(r)}if(0===m)return z=p<0?crt(-p):-crt(p),g=2*z-c/3,v=-z-c/3,[g,v].filter(r);{const t=sqrt(m);return z=crt(-p+t),d=crt(p+t),[z-d-c/3].filter(r)}},droots:function(t){if(3===t.length){const i=t[0],n=t[1],e=t[2],r=i-2*n+e;if(0!==r){const t=-sqrt(n*n-i*e),s=-i+n;return[-(t+s)/r,-(-t+s)/r]}return n!==e&&0===r?[(2*n-e)/(2*(n-e))]:[]}if(2===t.length){const i=t[0],n=t[1];return i!==n?[i/(i-n)]:[]}return[]},curvature:function(t,i,n,e,r){let s,o,u,l,c=0,a=0;const h=utils.compute(t,i),x=utils.compute(t,n),y=h.x*h.x+h.y*h.y;if(e?(s=sqrt(pow(h.y*x.z-x.y*h.z,2)+pow(h.z*x.x-x.z*h.x,2)+pow(h.x*x.y-x.x*h.y,2)),o=pow(y+h.z*h.z,1.5)):(s=h.x*x.y-h.y*x.x,o=pow(y,1.5)),0===s||0===o)return{k:0,r:0};if(c=s/o,a=o/s,!r){const r=utils.curvature(t-.001,i,n,e,!0).k,s=utils.curvature(t+.001,i,n,e,!0).k;l=(s-c+(c-r))/2,u=(abs(s-c)+abs(c-r))/2}return{k:c,r:a,dk:l,adk:u}},inflections:function(t){if(t.length<4)return[];const i=utils.align(t,{p1:t[0],p2:t.slice(-1)[0]}),n=i[2].x*i[1].y,e=i[3].x*i[1].y,r=i[1].x*i[2].y,s=18*(-3*n+2*e+3*r-i[3].x*i[2].y),o=18*(3*n-e-3*r),u=18*(r-n);if(utils.approximately(s,0)){if(!utils.approximately(o,0)){let t=-u/o;if(0<=t&&t<=1)return[t]}return[]}const l=o*o-4*s*u,c=Math.sqrt(l),a=2*s;return utils.approximately(a,0)?[]:[(c-o)/a,-(o+c)/a].filter((function(t){return 0<=t&&t<=1}))},bboxoverlap:function(t,i){const n=["x","y"],e=n.length;for(let r,s,o,u,l=0;l<e;l++)if(r=n[l],s=t[r].mid,o=i[r].mid,u=(t[r].size+i[r].size)/2,abs(s-o)>=u)return!1;return!0},expandbox:function(t,i){i.x.min<t.x.min&&(t.x.min=i.x.min),i.y.min<t.y.min&&(t.y.min=i.y.min),i.z&&i.z.min<t.z.min&&(t.z.min=i.z.min),i.x.max>t.x.max&&(t.x.max=i.x.max),i.y.max>t.y.max&&(t.y.max=i.y.max),i.z&&i.z.max>t.z.max&&(t.z.max=i.z.max),t.x.mid=(t.x.min+t.x.max)/2,t.y.mid=(t.y.min+t.y.max)/2,t.z&&(t.z.mid=(t.z.min+t.z.max)/2),t.x.size=t.x.max-t.x.min,t.y.size=t.y.max-t.y.min,t.z&&(t.z.size=t.z.max-t.z.min)},pairiteration:function(t,i,n){const e=t.bbox(),r=i.bbox(),s=1e5,o=n||.5;if(e.x.size+e.y.size<o&&r.x.size+r.y.size<o)return[(s*(t._t1+t._t2)/2|0)/s+"/"+(s*(i._t1+i._t2)/2|0)/s];let u=t.split(.5),l=i.split(.5),c=[{left:u.left,right:l.left},{left:u.left,right:l.right},{left:u.right,right:l.right},{left:u.right,right:l.left}];c=c.filter((function(t){return utils.bboxoverlap(t.left.bbox(),t.right.bbox())}));let a=[];return 0===c.length||(c.forEach((function(t){a=a.concat(utils.pairiteration(t.left,t.right,o))})),a=a.filter((function(t,i){return a.indexOf(t)===i}))),a},getccenter:function(t,i,n){const e=i.x-t.x,r=i.y-t.y,s=n.x-i.x,o=n.y-i.y,u=e*cos(quart)-r*sin(quart),l=e*sin(quart)+r*cos(quart),c=s*cos(quart)-o*sin(quart),a=s*sin(quart)+o*cos(quart),h=(t.x+i.x)/2,x=(t.y+i.y)/2,y=(i.x+n.x)/2,f=(i.y+n.y)/2,p=h+u,m=x+l,z=y+c,d=f+a,g=utils.lli8(h,x,p,m,y,f,z,d),v=utils.dist(g,t);let b,_=atan2(t.y-g.y,t.x-g.x),w=atan2(i.y-g.y,i.x-g.x),B=atan2(n.y-g.y,n.x-g.x);return _<B?((_>w||w>B)&&(_+=tau),_>B&&(b=B,B=_,_=b)):B<w&&w<_?(b=B,B=_,_=b):B+=tau,g.s=_,g.e=B,g.r=v,g},numberSort:function(t,i){return t-i}};class PolyBezier{constructor(t){this.curves=[],this._3d=!1,t&&(this.curves=t,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map((function(t){return utils.pointsToString(t.points)})).join(", ")+"]"}addCurve(t){this.curves.push(t),this._3d=this._3d||t._3d}length(){return this.curves.map((function(t){return t.length()})).reduce((function(t,i){return t+i}))}curve(t){return this.curves[t]}bbox(){const t=this.curves;for(var i=t[0].bbox(),n=1;n<t.length;n++)utils.expandbox(i,t[n].bbox());return i}offset(t){const i=[];return this.curves.forEach((function(n){i.push(...n.offset(t))})),new PolyBezier(i)}}const{abs:abs$1,min:min,max:max,cos:cos$1,sin:sin$1,acos:acos$1,sqrt:sqrt$1}=Math,pi$1=Math.PI;class Bezier{constructor(t){let i=t&&t.forEach?t:Array.from(arguments).slice(),n=!1;if("object"==typeof i[0]){n=i.length;const t=[];i.forEach((function(i){["x","y","z"].forEach((function(n){void 0!==i[n]&&t.push(i[n])}))})),i=t}let e=!1;const r=i.length;if(n){if(n>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");e=!0}}else if(6!==r&&8!==r&&9!==r&&12!==r&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const s=this._3d=!e&&(9===r||12===r)||t&&t[0]&&void 0!==t[0].z,o=this.points=[];for(let t=0,n=s?3:2;t<r;t+=n){var u={x:i[t],y:i[t+1]};s&&(u.z=i[t+2]),o.push(u)}const l=this.order=o.length-1,c=this.dims=["x","y"];s&&c.push("z"),this.dimlen=c.length;const a=utils.align(o,{p1:o[0],p2:o[l]}),h=utils.dist(o[0],o[l]);this._linear=a.reduce(((t,i)=>t+abs$1(i.y)),0)<h/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(t,i,n,e){if(void 0===e&&(e=.5),0===e)return new Bezier(i,i,n);if(1===e)return new Bezier(t,i,i);const r=Bezier.getABC(2,t,i,n,e);return new Bezier(t,r.A,n)}static cubicFromPoints(t,i,n,e,r){void 0===e&&(e=.5);const s=Bezier.getABC(3,t,i,n,e);void 0===r&&(r=utils.dist(i,s.C));const o=r*(1-e)/e,u=utils.dist(t,n),l=(n.x-t.x)/u,c=(n.y-t.y)/u,a=r*l,h=r*c,x=o*l,y=o*c,f=i.x-a,p=i.y-h,m=i.x+x,z=i.y+y,d=s.A,g=d.x+(f-d.x)/(1-e),v=d.y+(p-d.y)/(1-e),b=d.x+(m-d.x)/e,_=d.y+(z-d.y)/e,w={x:t.x+(g-t.x)/e,y:t.y+(v-t.y)/e},B={x:n.x+(b-n.x)/(1-e),y:n.y+(_-n.y)/(1-e)};return new Bezier(t,w,B,n)}static getUtils(){return utils}getUtils(){return Bezier.getUtils()}static get PolyBezier(){return PolyBezier}valueOf(){return this.toString()}toString(){return utils.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const t=this.points,i=["M",t[0].x,t[0].y,2===this.order?"Q":"C"];for(let n=1,e=t.length;n<e;n++)i.push(t[n].x),i.push(t[n].y);return i.join(" ")}setRatios(t){if(t.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=t,this._lut=[]}verify(){const t=this.coordDigest();t!==this._print&&(this._print=t,this.update())}coordDigest(){return this.points.map((function(t,i){return""+i+t.x+t.y+(t.z?t.z:0)})).join("")}update(){this._lut=[],this.dpoints=utils.derive(this.points,this._3d),this.computedirection()}computedirection(){const t=this.points,i=utils.angle(t[0],t[this.order],t[1]);this.clockwise=i>0}length(){return utils.length(this.derivative.bind(this))}static getABC(t=2,i,n,e,r=.5){const s=utils.projectionratio(r,t),o=1-s,u={x:s*i.x+o*e.x,y:s*i.y+o*e.y},l=utils.abcratio(r,t);return{A:{x:n.x+(n.x-u.x)/l,y:n.y+(n.y-u.y)/l},B:n,C:u,S:i,E:e}}getABC(t,i){i=i||this.get(t);let n=this.points[0],e=this.points[this.order];return Bezier.getABC(this.order,n,i,e,t)}getLUT(t){if(this.verify(),t=t||100,this._lut.length===t)return this._lut;this._lut=[],t++,this._lut=[];for(let i,n,e=0;e<t;e++)n=e/(t-1),i=this.compute(n),i.t=n,this._lut.push(i);return this._lut}on(i,n){n=n||5;const e=this.getLUT(),r=[];for(let t,s=0,o=0;s<e.length;s++)t=e[s],utils.dist(t,i)<n&&(r.push(t),o+=s/e.length);return!!r.length&&(t/=r.length)}project(t){const i=this.getLUT(),n=i.length-1,e=utils.closest(i,t),r=e.mpos,s=(r-1)/n,o=(r+1)/n,u=.1/n;let l,c=e.mdist,a=s,h=a;c+=1;for(let i;a<o+u;a+=u)l=this.compute(a),i=utils.dist(t,l),i<c&&(c=i,h=a);return h=h<0?0:h>1?1:h,l=this.compute(h),l.t=h,l.d=c,l}get(t){return this.compute(t)}point(t){return this.points[t]}compute(t){return this.ratios?utils.computeWithRatios(t,this.points,this.ratios,this._3d):utils.compute(t,this.points,this._3d,this.ratios)}raise(){const t=this.points,i=[t[0]],n=t.length;for(let e,r,s=1;s<n;s++)e=t[s],r=t[s-1],i[s]={x:(n-s)/n*e.x+s/n*r.x,y:(n-s)/n*e.y+s/n*r.y};return i[n]=t[n-1],new Bezier(i)}derivative(t){return utils.compute(t,this.dpoints[0],this._3d)}dderivative(t){return utils.compute(t,this.dpoints[1],this._3d)}align(){let t=this.points;return new Bezier(utils.align(t,{p1:t[0],p2:t[t.length-1]}))}curvature(t){return utils.curvature(t,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return utils.inflections(this.points)}normal(t){return this._3d?this.__normal3(t):this.__normal2(t)}__normal2(t){const i=this.derivative(t),n=sqrt$1(i.x*i.x+i.y*i.y);return{x:-i.y/n,y:i.x/n}}__normal3(t){const i=this.derivative(t),n=this.derivative(t+.01),e=sqrt$1(i.x*i.x+i.y*i.y+i.z*i.z),r=sqrt$1(n.x*n.x+n.y*n.y+n.z*n.z);i.x/=e,i.y/=e,i.z/=e,n.x/=r,n.y/=r,n.z/=r;const s={x:n.y*i.z-n.z*i.y,y:n.z*i.x-n.x*i.z,z:n.x*i.y-n.y*i.x},o=sqrt$1(s.x*s.x+s.y*s.y+s.z*s.z);s.x/=o,s.y/=o,s.z/=o;const u=[s.x*s.x,s.x*s.y-s.z,s.x*s.z+s.y,s.x*s.y+s.z,s.y*s.y,s.y*s.z-s.x,s.x*s.z-s.y,s.y*s.z+s.x,s.z*s.z];return{x:u[0]*i.x+u[1]*i.y+u[2]*i.z,y:u[3]*i.x+u[4]*i.y+u[5]*i.z,z:u[6]*i.x+u[7]*i.y+u[8]*i.z}}hull(t){let i=this.points,n=[],e=[],r=0;for(e[r++]=i[0],e[r++]=i[1],e[r++]=i[2],3===this.order&&(e[r++]=i[3]);i.length>1;){n=[];for(let s,o=0,u=i.length-1;o<u;o++)s=utils.lerp(t,i[o],i[o+1]),e[r++]=s,n.push(s);i=n}return e}split(t,i){if(0===t&&i)return this.split(i).left;if(1===i)return this.split(t).right;const n=this.hull(t),e={left:2===this.order?new Bezier([n[0],n[3],n[5]]):new Bezier([n[0],n[4],n[7],n[9]]),right:2===this.order?new Bezier([n[5],n[4],n[2]]):new Bezier([n[9],n[8],n[6],n[3]]),span:n};return e.left._t1=utils.map(0,0,1,this._t1,this._t2),e.left._t2=utils.map(t,0,1,this._t1,this._t2),e.right._t1=utils.map(t,0,1,this._t1,this._t2),e.right._t2=utils.map(1,0,1,this._t1,this._t2),i?(i=utils.map(i,t,1,0,1),e.right.split(i).left):e}extrema(){const t={};let i=[];return this.dims.forEach(function(n){let e=function(t){return t[n]},r=this.dpoints[0].map(e);t[n]=utils.droots(r),3===this.order&&(r=this.dpoints[1].map(e),t[n]=t[n].concat(utils.droots(r))),t[n]=t[n].filter((function(t){return t>=0&&t<=1})),i=i.concat(t[n].sort(utils.numberSort))}.bind(this)),t.values=i.sort(utils.numberSort).filter((function(t,n){return i.indexOf(t)===n})),t}bbox(){const t=this.extrema(),i={};return this.dims.forEach(function(n){i[n]=utils.getminmax(this,n,t[n])}.bind(this)),i}overlaps(t){const i=this.bbox(),n=t.bbox();return utils.bboxoverlap(i,n)}offset(t,i){if(void 0!==i){const n=this.get(t),e=this.normal(t),r={c:n,n:e,x:n.x+e.x*i,y:n.y+e.y*i};return this._3d&&(r.z=n.z+e.z*i),r}if(this._linear){const i=this.normal(0),n=this.points.map((function(n){const e={x:n.x+t*i.x,y:n.y+t*i.y};return n.z&&i.z&&(e.z=n.z+t*i.z),e}));return[new Bezier(n)]}return this.reduce().map((function(i){return i._linear?i.offset(t)[0]:i.scale(t)}))}simple(){if(3===this.order){const t=utils.angle(this.points[0],this.points[3],this.points[1]),i=utils.angle(this.points[0],this.points[3],this.points[2]);if(t>0&&i<0||t<0&&i>0)return!1}const t=this.normal(0),i=this.normal(1);let n=t.x*i.x+t.y*i.y;return this._3d&&(n+=t.z*i.z),abs$1(acos$1(n))<pi$1/3}reduce(){let t,i,n=0,e=0,r=.01,s=[],o=[],u=this.extrema().values;for(-1===u.indexOf(0)&&(u=[0].concat(u)),-1===u.indexOf(1)&&u.push(1),n=u[0],t=1;t<u.length;t++)e=u[t],i=this.split(n,e),i._t1=n,i._t2=e,s.push(i),n=e;return s.forEach((function(t){for(n=0,e=0;e<=1;)for(e=n+r;e<=1.01;e+=r)if(i=t.split(n,e),!i.simple()){if(e-=r,abs$1(n-e)<r)return[];i=t.split(n,e),i._t1=utils.map(n,0,1,t._t1,t._t2),i._t2=utils.map(e,0,1,t._t1,t._t2),o.push(i),n=e;break}n<1&&(i=t.split(n,1),i._t1=utils.map(n,0,1,t._t1,t._t2),i._t2=t._t2,o.push(i))})),o}translate(t,i,n){n="number"==typeof n?n:i;const e=this.order;let r=this.points.map(((t,r)=>(1-r/e)*i+r/e*n));return new Bezier(this.points.map(((i,n)=>({x:i.x+t.x*r[n],y:i.y+t.y*r[n]}))))}scale(t){const i=this.order;let n=!1;if("function"==typeof t&&(n=t),n&&2===i)return this.raise().scale(n);const e=this.clockwise,r=this.points;if(this._linear)return this.translate(this.normal(0),n?n(0):t,n?n(1):t);const s=n?n(0):t,o=n?n(1):t,u=[this.offset(0,10),this.offset(1,10)],l=[],c=utils.lli4(u[0],u[0].c,u[1],u[1].c);if(!c)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach((function(t){const n=l[t*i]=utils.copy(r[t*i]);n.x+=(t?o:s)*u[t].n.x,n.y+=(t?o:s)*u[t].n.y})),n?([0,1].forEach((function(s){if(2!==i||!s){var o=r[s+1],u={x:o.x-c.x,y:o.y-c.y},a=n?n((s+1)/i):t;n&&!e&&(a=-a);var h=sqrt$1(u.x*u.x+u.y*u.y);u.x/=h,u.y/=h,l[s+1]={x:o.x+a*u.x,y:o.y+a*u.y}}})),new Bezier(l)):([0,1].forEach((t=>{if(2===i&&t)return;const n=l[t*i],e=this.derivative(t),s={x:n.x+e.x,y:n.y+e.y};l[t+1]=utils.lli4(n,s,c,r[t+1])})),new Bezier(l))}outline(t,i,n,e){if(i=void 0===i?t:i,this._linear){const r=this.normal(0),s=this.points[0],o=this.points[this.points.length-1];let u,l,c;void 0===n&&(n=t,e=i),u={x:s.x+r.x*t,y:s.y+r.y*t},c={x:o.x+r.x*n,y:o.y+r.y*n},l={x:(u.x+c.x)/2,y:(u.y+c.y)/2};const a=[u,l,c];u={x:s.x-r.x*i,y:s.y-r.y*i},c={x:o.x-r.x*e,y:o.y-r.y*e},l={x:(u.x+c.x)/2,y:(u.y+c.y)/2};const h=[c,l,u],x=utils.makeline(h[2],a[0]),y=utils.makeline(a[2],h[0]),f=[x,new Bezier(a),y,new Bezier(h)];return new PolyBezier(f)}const r=this.reduce(),s=r.length,o=[];let u,l=[],c=0,a=this.length();const h=void 0!==n&&void 0!==e;function x(t,i,n,e,r){return function(s){const o=e/n,u=(e+r)/n,l=i-t;return utils.map(s,0,1,t+o*l,t+u*l)}}r.forEach((function(r){const s=r.length();h?(o.push(r.scale(x(t,n,a,c,s))),l.push(r.scale(x(-i,-e,a,c,s)))):(o.push(r.scale(t)),l.push(r.scale(-i))),c+=s})),l=l.map((function(t){return u=t.points,u[3]?t.points=[u[3],u[2],u[1],u[0]]:t.points=[u[2],u[1],u[0]],t})).reverse();const y=o[0].points[0],f=o[s-1].points[o[s-1].points.length-1],p=l[s-1].points[l[s-1].points.length-1],m=l[0].points[0],z=utils.makeline(p,y),d=utils.makeline(f,m),g=[z].concat(o).concat([d]).concat(l);return new PolyBezier(g)}outlineshapes(t,i,n){i=i||t;const e=this.outline(t,i).curves,r=[];for(let t=1,i=e.length;t<i/2;t++){const s=utils.makeshape(e[t],e[i-t],n);s.startcap.virtual=t>1,s.endcap.virtual=t<i/2-1,r.push(s)}return r}intersects(t,i){return t?t.p1&&t.p2?this.lineIntersects(t):(t instanceof Bezier&&(t=t.reduce()),this.curveintersects(this.reduce(),t,i)):this.selfintersects(i)}lineIntersects(t){const i=min(t.p1.x,t.p2.x),n=min(t.p1.y,t.p2.y),e=max(t.p1.x,t.p2.x),r=max(t.p1.y,t.p2.y);return utils.roots(this.points,t).filter((t=>{var s=this.get(t);return utils.between(s.x,i,e)&&utils.between(s.y,n,r)}))}selfintersects(t){const i=this.reduce(),n=i.length-2,e=[];for(let r,s,o,u=0;u<n;u++)s=i.slice(u,u+1),o=i.slice(u+2),r=this.curveintersects(s,o,t),e.push(...r);return e}curveintersects(t,i,n){const e=[];t.forEach((function(t){i.forEach((function(i){t.overlaps(i)&&e.push({left:t,right:i})}))}));let r=[];return e.forEach((function(t){const i=utils.pairiteration(t.left,t.right,n);i.length>0&&(r=r.concat(i))})),r}arcs(t){return t=t||.5,this._iterate(t,[])}_error(t,i,n,e){const r=(e-n)/4,s=this.get(n+r),o=this.get(e-r),u=utils.dist(t,i),l=utils.dist(t,s),c=utils.dist(t,o);return abs$1(l-u)+abs$1(c-u)}_iterate(t,i){let n,e=0,r=1;do{n=0,r=1;let s,o,u,l,c,a=this.get(e),h=!1,x=!1,y=r,f=1;do{if(x=h,l=u,y=(e+r)/2,s=this.get(y),o=this.get(r),u=utils.getccenter(a,s,o),u.interval={start:e,end:r},h=this._error(u,a,e,r)<=t,c=x&&!h,c||(f=r),h){if(r>=1){if(u.interval.end=f=1,l=u,r>1){let t={x:u.x+u.r*cos$1(u.e),y:u.y+u.r*sin$1(u.e)};u.e+=utils.angle({x:u.x,y:u.y},t,this.get(1))}break}r+=(r-e)/2}else r=y}while(!c&&n++<100);if(n>=100)break;l=l||u,i.push(l),e=f}while(r<1);return i}}
